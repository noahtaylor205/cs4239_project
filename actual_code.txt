%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Solar Position Algorithm (SPA) for Solar Radiation Application
%                                         
% Measurement & Instrumentation Team Solar Radiation Research Laboratory
% National Renewable Energy Laboratory 1617 Cole Blvd, Golden, CO 80401
%
% Last modified:   2017/03/19   M. Mahooti
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [azimuth, elevation] = calculate_solar_position(datetime, timezone, latitude, longitude)
clc

% These need to be defined outside any function to be accessible everywhere
% global SPA_ZA SPA_ZA_INC SPA_ZA_RTS SPA_ALL
% global SUN_RADIUS L_COUNT B_COUNT R_COUNT Y_COUNT
% global L_MAX_SUBCOUNT B_MAX_SUBCOUNT R_MAX_SUBCOUNT
% global TERM_A TERM_B TERM_C
% global TERM_X0 TERM_X1 TERM_X2 TERM_X3 TERM_X4
% global TERM_COUNT TERM_PSI_A TERM_PSI_B TERM_EPS_C TERM_EPS_D
% global TERM_PE_COUNT JD_MINUS JD_ZERO JD_PLUS JD_COUNT
% global SUN_TRANSIT SUN_RISE SUN_SET SUN_COUNT
% global TERM_X_COUNT TERM_Y_COUNT
% global l_subcount b_subcount r_subcount
% global L_TERMS B_TERMS R_TERMS Y_TERMS PE_TERMS

SPA_ZA = 0;     %calculate zenith and azimuth
SPA_ZA_INC = 1; %calculate zenith, azimuth, and incidence
SPA_ZA_RTS = 2; %calculate zenith, azimuth, and sun rise/transit/set values
SPA_ALL = 3;    %calculate all SPA output values

SUN_RADIUS = 0.26667;
L_COUNT = 6;
B_COUNT = 2;
R_COUNT = 5;
Y_COUNT = 63;
L_MAX_SUBCOUNT = 64;
B_MAX_SUBCOUNT = 5;
R_MAX_SUBCOUNT = 40;
TERM_A = 1;
TERM_B = 2;
TERM_C = 3;
TERM_X0 = 1;
TERM_X1 = 2;
TERM_X2 = 3;
TERM_X3 = 4;
TERM_X4 = 5;
TERM_COUNT = 3;
TERM_PSI_A = 1;
TERM_PSI_B = 2;
TERM_EPS_C = 3;
TERM_EPS_D = 4;
TERM_PE_COUNT = 5;
JD_MINUS = 1;
JD_ZERO = 2;
JD_PLUS = 3;
JD_COUNT = 4;
SUN_TRANSIT = 1;
SUN_RISE = 2;
SUN_SET = 3;
SUN_COUNT = 4;
TERM_X_COUNT = 5;
TERM_Y_COUNT = 5;
l_subcount = [64,34,20,7,3,1];
b_subcount = [5,2];
r_subcount = [40,10,6,2,1];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Earth Periodic Terms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
L_TERMS = ...
{   [   175347046.0,0,0;
        3341656.0,4.6692568,6283.07585;
        34894.0,4.6261,12566.1517;
        3497.0,2.7441,5753.3849;
        3418.0,2.8289,3.5231;
        3136.0,3.6277,77713.7715;
        2676.0,4.4181,7860.4194;
        2343.0,6.1352,3930.2097;
        1324.0,0.7425,11506.7698;
        1273.0,2.0371,529.691;
        1199.0,1.1096,1577.3435;
        990,5.233,5884.927;
        902,2.045,26.298;
        857,3.508,398.149;
        780,1.179,5223.694;
        753,2.533,5507.553;
        505,4.583,18849.228;
        492,4.205,775.523;
        357,2.92,0.067;
        317,5.849,11790.629;
        284,1.899,796.298;
        271,0.315,10977.079;
        243,0.345,5486.778;
        206,4.806,2544.314;
        205,1.869,5573.143;
        202,2.458,6069.777;
        156,0.833,213.299;
        132,3.411,2942.463;
        126,1.083,20.775;
        115,0.645,0.98;
        103,0.636,4694.003;
        102,0.976,15720.839;
        102,4.267,7.114;
        99,6.21,2146.17;
        98,0.68,155.42;
        86,5.98,161000.69;
        85,1.3,6275.96;
        85,3.67,71430.7;
        80,1.81,17260.15;
        79,3.04,12036.46;
        75,1.76,5088.63;
        74,3.5,3154.69;
        74,4.68,801.82;
        70,0.83,9437.76;
        62,3.98,8827.39;
        61,1.82,7084.9;
        57,2.78,6286.6;
        56,4.39,14143.5;
        56,3.47,6279.55;
        52,0.19,12139.55;
        52,1.33,1748.02;
        51,0.28,5856.48;
        49,0.49,1194.45;
        41,5.37,8429.24;
        41,2.4,19651.05;
        39,6.17,10447.39;
        37,6.04,10213.29;
        37,2.57,1059.38;
        36,1.71,2352.87;
        36,1.78,6812.77;
        33,0.59,17789.85;
        30,0.44,83996.85;
        30,2.74,1349.87;
        25,3.16,4690.48],...
    [
        628331966747.0,0,0;
        206059.0,2.678235,6283.07585;
        4303.0,2.6351,12566.1517;
        425.0,1.59,3.523;
        119.0,5.796,26.298;
        109.0,2.966,1577.344;
        93,2.59,18849.23;
        72,1.14,529.69;
        68,1.87,398.15;
        67,4.41,5507.55;
        59,2.89,5223.69;
        56,2.17,155.42;
        45,0.4,796.3;
        36,0.47,775.52;
        29,2.65,7.11;
        21,5.34,0.98;
        19,1.85,5486.78;
        19,4.97,213.3;
        17,2.99,6275.96;
        16,0.03,2544.31;
        16,1.43,2146.17;
        15,1.21,10977.08;
        12,2.83,1748.02;
        12,3.26,5088.63;
        12,5.27,1194.45;
        12,2.08,4694;
        11,0.77,553.57;
        10,1.3,6286.6;
        10,4.24,1349.87;
        9,2.7,242.73;
        9,5.64,951.72;
        8,5.3,2352.87;
        6,2.65,9437.76;
        6,4.67,4690.48],...
    [
        52919.0,0,0;
        8720.0,1.0721,6283.0758;
        309.0,0.867,12566.152;
        27,0.05,3.52;
        16,5.19,26.3;
        16,3.68,155.42;
        10,0.76,18849.23;
        9,2.06,77713.77;
        7,0.83,775.52;
        5,4.66,1577.34;
        4,1.03,7.11;
        4,3.44,5573.14;
        3,5.14,796.3;
        3,6.05,5507.55;
        3,1.19,242.73;
        3,6.12,529.69;
        3,0.31,398.15;
        3,2.28,553.57;
        2,4.38,5223.69;
        2,3.75,0.98],...
    [
        289.0,5.844,6283.076;
        35,0,0;
        17,5.49,12566.15;
        3,5.2,155.42;
        1,4.72,3.52;
        1,5.3,18849.23;
        1,5.97,242.73],...
    [
        114.0,3.142,0;
        8,4.13,6283.08;
        1,3.84,12566.15],...
    [
        1,3.14,0] };

B_TERMS = ...
{   [   280.0,3.199,84334.662;
        102.0,5.422,5507.553;
        80,3.88,5223.69;
        44,3.7,2352.87;
        32,4,1577.34],...
    [
        9,3.9,5507.55;
        6,1.73,5223.69] };

R_TERMS = ...
{   [   100013989.0,0,0;
        1670700.0,3.0984635,6283.07585;
        13956.0,3.05525,12566.1517;
        3084.0,5.1985,77713.7715;
        1628.0,1.1739,5753.3849;
        1576.0,2.8469,7860.4194;
        925.0,5.453,11506.77;
        542.0,4.564,3930.21;
        472.0,3.661,5884.927;
        346.0,0.964,5507.553;
        329.0,5.9,5223.694;
        307.0,0.299,5573.143;
        243.0,4.273,11790.629;
        212.0,5.847,1577.344;
        186.0,5.022,10977.079;
        175.0,3.012,18849.228;
        110.0,5.055,5486.778;
        98,0.89,6069.78;
        86,5.69,15720.84;
        86,1.27,161000.69;
        65,0.27,17260.15;
        63,0.92,529.69;
        57,2.01,83996.85;
        56,5.24,71430.7;
        49,3.25,2544.31;
        47,2.58,775.52;
        45,5.54,9437.76;
        43,6.01,6275.96;
        39,5.36,4694;
        38,2.39,8827.39;
        37,0.83,19651.05;
        37,4.9,12139.55;
        36,1.67,12036.46;
        35,1.84,2942.46;
        33,0.24,7084.9;
        32,0.18,5088.63;
        32,1.78,398.15;
        28,1.21,6286.6;
        28,1.9,6279.55;
        26,4.59,10447.39],...
    [
        103019.0,1.10749,6283.07585;
        1721.0,1.0644,12566.1517;
        702.0,3.142,0;
        32,1.02,18849.23;
        31,2.84,5507.55;
        25,1.32,5223.69;
        18,1.42,1577.34;
        10,5.91,10977.08;
        9,1.42,6275.96;
        9,0.27,5486.78],...
    [
        4359.0,5.7846,6283.0758;
        124.0,5.579,12566.152;
        12,3.14,0;
        9,3.63,77713.77;
        6,1.87,5573.14;
        3,5.47,18849.23],...
    [
        145.0,4.273,6283.076;
        7,3.92,12566.15],...
    [
        4,2.56,6283.08] };

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Periodic Terms for the nutation in longitude and obliquity
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Y_TERMS = ...
[   0,0,0,0,1;
    -2,0,0,2,2;
    0,0,0,2,2;
    0,0,0,0,2;
    0,1,0,0,0;
    0,0,1,0,0;
    -2,1,0,2,2;
    0,0,0,2,1;
    0,0,1,2,2;
    -2,-1,0,2,2;
    -2,0,1,0,0;
    -2,0,0,2,1;
    0,0,-1,2,2;
    2,0,0,0,0;
    0,0,1,0,1;
    2,0,-1,2,2;
    0,0,-1,0,1;
    0,0,1,2,1;
    -2,0,2,0,0;
    0,0,-2,2,1;
    2,0,0,2,2;
    0,0,2,2,2;
    0,0,2,0,0;
    -2,0,1,2,2;
    0,0,0,2,0;
    -2,0,0,2,0;
    0,0,-1,2,1;
    0,2,0,0,0;
    2,0,-1,0,1;
    -2,2,0,2,2;
    0,1,0,0,1;
    -2,0,1,0,1;
    0,-1,0,0,1;
    0,0,2,-2,0;
    2,0,-1,2,1;
    2,0,1,2,2;
    0,1,0,2,2;
    -2,1,1,0,0;
    0,-1,0,2,2;
    2,0,0,2,1;
    2,0,1,0,0;
    -2,0,2,2,2;
    -2,0,1,2,1;
    2,0,-2,0,1;
    2,0,0,0,1;
    0,-1,1,0,0;
    -2,-1,0,2,1;
    -2,0,0,0,1;
    0,0,2,2,1;
    -2,0,2,0,1;
    -2,1,0,2,1;
    0,0,1,-2,0;
    -1,0,1,0,0;
    -2,1,0,0,0;
    1,0,0,0,0;
    0,0,1,2,0;
    0,0,-2,2,2;
    -1,-1,1,0,0;
    0,1,1,0,0;
    0,-1,1,2,2;
    2,-1,-1,2,2;
    0,0,3,2,2;
    2,-1,0,2,2];

PE_TERMS = ...
[   -171996,-174.2,92025,8.9;
    -13187,-1.6,5736,-3.1;
    -2274,-0.2,977,-0.5;
    2062,0.2,-895,0.5;
    1426,-3.4,54,-0.1;
    712,0.1,-7,0;
    -517,1.2,224,-0.6;
    -386,-0.4,200,0;
    -301,0,129,-0.1;
    217,-0.5,-95,0.3;
    -158,0,0,0;
    129,0.1,-70,0;
    123,0,-53,0;
    63,0,0,0;
    63,0.1,-33,0;
    -59,0,26,0;
    -58,-0.1,32,0;
    -51,0,27,0;
    48,0,0,0;
    46,0,-24,0;
    -38,0,16,0;
    -31,0,13,0;
    29,0,0,0;
    29,0,-12,0;
    26,0,0,0;
    -22,0,0,0;
    21,0,-10,0;
    17,-0.1,0,0;
    16,0,-8,0;
    -16,0.1,7,0;
    -15,0,9,0;
    -13,0,7,0;
    -12,0,6,0;
    11,0,0,0;
    -10,0,5,0;
    -8,0,3,0;
    7,0,-3,0;
    -7,0,0,0;
    -7,0,3,0;
    -7,0,3,0;
    6,0,0,0;
    6,0,-3,0;
    6,0,-3,0;
    -6,0,3,0;
    -6,0,3,0;
    5,0,0,0;
    -5,0,3,0;
    -5,0,3,0;
    -5,0,3,0;
    4,0,0,0;
    4,0,0,0;
    4,0,0,0;
    -4,0,0,0;
    -4,0,0,0;
    -4,0,0,0;
    3,0,0,0;
    -3,0,0,0;
    -3,0,0,0;
    -3,0,0,0;
    -3,0,0,0;
    -3,0,0,0;
    -3,0,0,0;
    -3,0,0,0];

% declare the SPA structure
% enter required input values into SPA structure
spa.year = datetime(1);
spa.month = datetime(2);
spa.day = datetime(3);
spa.hour = datetime(4);
spa.minute = datetime(5);
spa.second = datetime(6);
spa.timezone = timezone;
spa.delta_ut1     = 0;
spa.delta_t       = 67;
spa.longitude = longitude;
spa.latitude = latitude;
spa.elevation     = 1830.14;
spa.pressure      = 820;
spa.temperature   = 11;
spa.slope         = 30;
spa.azm_rotation  = -10;
spa.atmos_refract = 0.5667;
spa.function      = SPA_ALL;
spa.jd = NaN;
spa.jc = NaN;
spa.jde = NaN;
spa.jce = NaN;
spa.jme = NaN;
spa.l = NaN;
spa.b = NaN;
spa.r = NaN;
spa.theta = NaN;
spa.beta  = NaN;
spa.x0 = NaN;
spa.x1 = NaN;
spa.x2 = NaN;
spa.x3 = NaN;
spa.x4 = NaN;
spa.epsilon0 = NaN;
spa.epsilon  = NaN;
spa.del_tau = NaN;
spa.lamda   = NaN;
spa.nu0     = NaN;
spa.nu      = NaN;
spa.alpha = NaN;
spa.delta = NaN;
spa.del_psi = NaN;
spa.del_epsilon = NaN;
spa.h = NaN;
spa.xi = NaN;
spa.del_alpha = NaN;
spa.delta_prime = NaN;
spa.alpha_prime = NaN;
spa.h_prime = NaN;
spa.e0 = NaN;
spa.del_e = NaN;
spa.e = NaN;
spa.zenith = NaN;
spa.azimuth_astro = NaN;
spa.azimuth = NaN;
spa.incidence = NaN;
spa.eot = NaN;
spa.srha = NaN;
spa.ssha = NaN;
spa.sta = NaN;
spa.suntransit = NaN;
spa.sunrise = NaN;
spa.sunset = NaN;

%call the SPA calculate function and pass the SPA structure
[result, spa] = spa_calculate(spa);
azimuth = 0;
elevation = 0;

if (result == 0)  %check for SPA errors
    % %display the results inside the SPA structure
    % fprintf('Julian Day:    %.6f\n',spa.jd);
    % fprintf('L:             %.6e degrees\n',spa.l);
    % fprintf('B:             %.6e degrees\n',spa.b);
    % fprintf('R:             %.6f AU\n',spa.r);
    % fprintf('H:             %.6f degrees\n',spa.h);
    % fprintf('Delta Psi:     %.6e degrees\n',spa.del_psi);
    % fprintf('Delta Epsilon: %.6e degrees\n',spa.del_epsilon);
    % fprintf('Epsilon:       %.6f degrees\n',spa.epsilon);
    % fprintf('Zenith:        %.6f degrees\n',spa.zenith);
    % fprintf('Azimuth:       %.6f degrees\n',spa.azimuth);
    % fprintf('Incidence:     %.6f degrees\n',spa.incidence);
    % 
    % min = 60*(spa.sunrise - floor(spa.sunrise));
    % sec = 60*(min - floor(min));
    % fprintf('Sunrise:       %2.2d:%2.2d:%2.2d Local Time\n', ...
    %        floor(spa.sunrise), floor(min), floor(sec));
    % 
    % min = 60*(spa.sunset - floor(spa.sunset));
    % sec = 60*(min - floor(min));
    % fprintf('Sunset:        %2.2d:%2.2d:%2.2d Local Time\n', ...
    %         floor(spa.sunset), floor(min), floor(sec));
    azimuth = spa.azimuth;
    elevation = 90 - spa.zenith; 
else
    fprintf('SPA Error Code');

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The output of this program should be:
%
%Julian Day:    2452930.312847
%L:             2.401826e+01 degrees
%B:             -1.011219e-04 degrees
%R:             0.996542 AU
%H:             11.105902 degrees
%Delta Psi:     -3.998404e-03 degrees
%Delta Epsilon: 1.666568e-03 degrees
%Epsilon:       23.440465 degrees
%Zenith:        50.111622 degrees
%Azimuth:       194.340241 degrees
%Incidence:     25.187000 degrees
%Sunrise:       06:12:43 Local Time
%Sunset:        17:20:19 Local Time
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function limited = limit_degrees(degrees)

degrees = degrees/360;
limited = 360*(degrees-floor(degrees));

if (limited < 0)
    limited = limited + 360;
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function limited = limit_degrees180pm(degrees)

degrees = degrees/360;
limited = 360*(degrees-floor(degrees));

if(limited < -180)
    limited = limited + 360;
elseif(limited > 180)
    limited = limited - 360;
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function limited = limit_degrees180(degrees)

degrees = degrees/180;
limited = 180*(degrees-floor(degrees));
if (limited < 0)
    limited = limited + 180;
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function limited = limit_zero2one(value)

limited = value - floor(value);
if (limited < 0)
    limited = limited + 1;
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function limited = limit_minutes(minutes)

limited = minutes;

if(limited < -20)
    limited = limited + 1440;
elseif(limited > 20)
    limited = limited - 1440;
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = dayfrac_to_local_hr(dayfrac, timezone)

out = 24*limit_zero2one(dayfrac + timezone/24);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = third_order_polynomial(a, b, c, d, x)

out = ((a*x + b)*x + c)*x + d;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = validate_inputs(spa)

SPA_ZA_INC = 1; %calculate zenith, azimuth, and incidence
SPA_ALL = 3;    %calculate all SPA output values


if ((spa.year        < -2000) || (spa.year        > 6000))
    out = 1;
    return
end
if ((spa.month       < 1    ) || (spa.month       > 12  ))
    out = 2;
    return
end
if ((spa.day         < 1    ) || (spa.day         > 31  ))
    out = 3;
    return
end
if ((spa.hour        < 0    ) || (spa.hour        > 24  ))
    out = 4;
    return
end
if ((spa.minute      < 0    ) || (spa.minute      > 59  ))
    out = 5;
    return
end
if ((spa.second      < 0    ) || (spa.second      >=60  ))
    out = 6;
    return
end
if ((spa.pressure    < 0    ) || (spa.pressure    > 5000))
    out = 12;
    return
end
if ((spa.temperature <= -273) || (spa.temperature > 6000))
    out = 13;
    return
end
if ((spa.delta_ut1   <= -1  ) || (spa.delta_ut1   >= 1  ))
    out = 17;
    return
end
if ((spa.hour        == 24  ) && (spa.minute      > 0   ))
    out = 5;
    return
end
if ((spa.hour        == 24  ) && (spa.second      > 0   ))
    out = 6;
    return
end

if (abs(spa.delta_t)       > 8000    )
    out = 7;
    return
end
if (abs(spa.timezone)      > 18      )
    out = 8;
    return
end
if (abs(spa.longitude)     > 180     )
    out = 9;
    return
end
if (abs(spa.latitude)      > 90      )
    out = 10;
    return
end
if (abs(spa.atmos_refract) > 5       )
    out = 16;
    return
end
if (    spa.elevation      < -6500000)
    out = 11;
    return
end

if ((spa.function == SPA_ZA_INC) || (spa.function == SPA_ALL))
    if (abs(spa.slope)         > 360)
        out = 14;
        return
    end
    if (abs(spa.azm_rotation)  > 360)
        out = 15;
        return
    end
end

out = 0;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function julian_day = julian_day(year,month,day,hour,minute,second,dut1,tz)

day_decimal = day+(hour-tz+(minute+(second+dut1)/60)/60)/24;

if(month < 3)
    month = month+12;
    year = year-1;
end

julian_day = floor(365.25*(year+4716))+floor(30.6001*(month+1))+...
             day_decimal-1524.5;

if (julian_day > 2299160)
    a = floor(year/100);
    julian_day = julian_day+(2-a+floor(a/4));
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = julian_century(jd)

out = (jd-2451545)/36525;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = julian_ephemeris_day(jd, delta_t)

out = jd+delta_t/86400;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = julian_ephemeris_century(jde)

out = (jde-2451545)/36525;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = julian_ephemeris_millennium(jce)

out = (jce/10);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = earth_periodic_term_summation(terms,count,jme)

TERM_A = 1;
TERM_B = 2;
TERM_C = 3;

sum = 0;

for i = 1:count
    sum = sum + (terms(i,TERM_A)*cos(terms(i,TERM_B)+terms(i,TERM_C)*jme));
end

out = sum;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = earth_values(term_sum,count,jme)

sum = 0;

for i = 1:count
    sum = sum + term_sum(i)*(jme^(i-1));
end

sum = sum/1e8;

out = sum;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = earth_heliocentric_longitude(jme)

L_TERMS = cell(1, 6);

L_TERMS{1} = [   175347046.0,0,0;
        3341656.0,4.6692568,6283.07585;
        34894.0,4.6261,12566.1517;
        3497.0,2.7441,5753.3849;
        3418.0,2.8289,3.5231;
        3136.0,3.6277,77713.7715;
        2676.0,4.4181,7860.4194;
        2343.0,6.1352,3930.2097;
        1324.0,0.7425,11506.7698;
        1273.0,2.0371,529.691;
        1199.0,1.1096,1577.3435;
        990,5.233,5884.927;
        902,2.045,26.298;
        857,3.508,398.149;
        780,1.179,5223.694;
        753,2.533,5507.553;
        505,4.583,18849.228;
        492,4.205,775.523;
        357,2.92,0.067;
        317,5.849,11790.629;
        284,1.899,796.298;
        271,0.315,10977.079;
        243,0.345,5486.778;
        206,4.806,2544.314;
        205,1.869,5573.143;
        202,2.458,6069.777;
        156,0.833,213.299;
        132,3.411,2942.463;
        126,1.083,20.775;
        115,0.645,0.98;
        103,0.636,4694.003;
        102,0.976,15720.839;
        102,4.267,7.114;
        99,6.21,2146.17;
        98,0.68,155.42;
        86,5.98,161000.69;
        85,1.3,6275.96;
        85,3.67,71430.7;
        80,1.81,17260.15;
        79,3.04,12036.46;
        75,1.76,5088.63;
        74,3.5,3154.69;
        74,4.68,801.82;
        70,0.83,9437.76;
        62,3.98,8827.39;
        61,1.82,7084.9;
        57,2.78,6286.6;
        56,4.39,14143.5;
        56,3.47,6279.55;
        52,0.19,12139.55;
        52,1.33,1748.02;
        51,0.28,5856.48;
        49,0.49,1194.45;
        41,5.37,8429.24;
        41,2.4,19651.05;
        39,6.17,10447.39;
        37,6.04,10213.29;
        37,2.57,1059.38;
        36,1.71,2352.87;
        36,1.78,6812.77;
        33,0.59,17789.85;
        30,0.44,83996.85;
        30,2.74,1349.87;
        25,3.16,4690.48];

L_TERMS{2} = [
        628331966747.0,0,0;
        206059.0,2.678235,6283.07585;
        4303.0,2.6351,12566.1517;
        425.0,1.59,3.523;
        119.0,5.796,26.298;
        109.0,2.966,1577.344;
        93,2.59,18849.23;
        72,1.14,529.69;
        68,1.87,398.15;
        67,4.41,5507.55;
        59,2.89,5223.69;
        56,2.17,155.42;
        45,0.4,796.3;
        36,0.47,775.52;
        29,2.65,7.11;
        21,5.34,0.98;
        19,1.85,5486.78;
        19,4.97,213.3;
        17,2.99,6275.96;
        16,0.03,2544.31;
        16,1.43,2146.17;
        15,1.21,10977.08;
        12,2.83,1748.02;
        12,3.26,5088.63;
        12,5.27,1194.45;
        12,2.08,4694;
        11,0.77,553.57;
        10,1.3,6286.6;
        10,4.24,1349.87;
        9,2.7,242.73;
        9,5.64,951.72;
        8,5.3,2352.87;
        6,2.65,9437.76;
        6,4.67,4690.48];

L_TERMS{3} = [
        52919.0,0,0;
        8720.0,1.0721,6283.0758;
        309.0,0.867,12566.152;
        27,0.05,3.52;
        16,5.19,26.3;
        16,3.68,155.42;
        10,0.76,18849.23;
        9,2.06,77713.77;
        7,0.83,775.52;
        5,4.66,1577.34;
        4,1.03,7.11;
        4,3.44,5573.14;
        3,5.14,796.3;
        3,6.05,5507.55;
        3,1.19,242.73;
        3,6.12,529.69;
        3,0.31,398.15;
        3,2.28,553.57;
        2,4.38,5223.69;
        2,3.75,0.98];

L_TERMS{4} = [
        289.0,5.844,6283.076;
        35,0,0;
        17,5.49,12566.15;
        3,5.2,155.42;
        1,4.72,3.52;
        1,5.3,18849.23;
        1,5.97,242.73];

L_TERMS{5} = [
        114.0,3.142,0;
        8,4.13,6283.08;
        1,3.84,12566.15];

L_TERMS{6} = [
        1,3.14,0];


L_COUNT = 6;
l_subcount = [64,34,20,7,3,1];


sum = zeros(L_COUNT,1);

for i = 1:L_COUNT
    L_TERM = L_TERMS{i};    
    sum(i) = earth_periodic_term_summation(L_TERM, l_subcount(i), jme);
end

out = limit_degrees(rad2deg(earth_values(sum, L_COUNT, jme)));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = earth_heliocentric_latitude(jme)

B_TERMS = cell(1, 2);

B_TERMS{1} = [   280.0,3.199,84334.662;
        102.0,5.422,5507.553;
        80,3.88,5223.69;
        44,3.7,2352.87;
        32,4,1577.34];

B_TERMS{2} = [
        9,3.9,5507.55;
        6,1.73,5223.69];

B_COUNT = 2;
b_subcount = [5,2];


sum = zeros(B_COUNT,1);

for i = 1:B_COUNT
    B_TERM = B_TERMS{i};
    sum(i) = earth_periodic_term_summation(B_TERM, b_subcount(i), jme);
end

out = rad2deg(earth_values(sum, B_COUNT, jme));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = earth_radius_vector(jme)

R_TERMS = cell(1, 5);

R_TERMS{1} = [   100013989.0,0,0;
        1670700.0,3.0984635,6283.07585;
        13956.0,3.05525,12566.1517;
        3084.0,5.1985,77713.7715;
        1628.0,1.1739,5753.3849;
        1576.0,2.8469,7860.4194;
        925.0,5.453,11506.77;
        542.0,4.564,3930.21;
        472.0,3.661,5884.927;
        346.0,0.964,5507.553;
        329.0,5.9,5223.694;
        307.0,0.299,5573.143;
        243.0,4.273,11790.629;
        212.0,5.847,1577.344;
        186.0,5.022,10977.079;
        175.0,3.012,18849.228;
        110.0,5.055,5486.778;
        98,0.89,6069.78;
        86,5.69,15720.84;
        86,1.27,161000.69;
        65,0.27,17260.15;
        63,0.92,529.69;
        57,2.01,83996.85;
        56,5.24,71430.7;
        49,3.25,2544.31;
        47,2.58,775.52;
        45,5.54,9437.76;
        43,6.01,6275.96;
        39,5.36,4694;
        38,2.39,8827.39;
        37,0.83,19651.05;
        37,4.9,12139.55;
        36,1.67,12036.46;
        35,1.84,2942.46;
        33,0.24,7084.9;
        32,0.18,5088.63;
        32,1.78,398.15;
        28,1.21,6286.6;
        28,1.9,6279.55;
        26,4.59,10447.39];

R_TERMS{2} = [
        103019.0,1.10749,6283.07585;
        1721.0,1.0644,12566.1517;
        702.0,3.142,0;
        32,1.02,18849.23;
        31,2.84,5507.55;
        25,1.32,5223.69;
        18,1.42,1577.34;
        10,5.91,10977.08;
        9,1.42,6275.96;
        9,0.27,5486.78];

R_TERMS{3} = [
        4359.0,5.7846,6283.0758;
        124.0,5.579,12566.152;
        12,3.14,0;
        9,3.63,77713.77;
        6,1.87,5573.14;
        3,5.47,18849.23];

R_TERMS{4} = [
        145.0,4.273,6283.076;
        7,3.92,12566.15];

R_TERMS{5} = [
        4,2.56,6283.08];


R_COUNT = 5;
r_subcount = [40,10,6,2,1];

sum = zeros(R_COUNT,1);

for i = 1:R_COUNT
    R_TERM = R_TERMS{i};
    sum(i) = earth_periodic_term_summation(R_TERM, r_subcount(i), jme);
end

out = earth_values(sum, R_COUNT, jme);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function theta = geocentric_longitude(l)

theta = l+180;

if (theta >= 360)
    theta = theta-360;
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = geocentric_latitude(b)

out = -b;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = mean_elongation_moon_sun(jce)

out = third_order_polynomial(1/189474,-0.0019142,445267.11148,297.85036,jce);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = mean_anomaly_sun(jce)

out = third_order_polynomial(-1/300000,-0.0001603,35999.05034,357.52772,jce);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = mean_anomaly_moon(jce)

out = third_order_polynomial(1/56250,0.0086972,477198.867398,134.96298,jce);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = argument_latitude_moon(jce)

out = third_order_polynomial(1/327270,-0.0036825,483202.017538,93.27191,jce);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = ascending_longitude_moon(jce)

out = third_order_polynomial(1/450000,0.0020708,-1934.136261,125.04452,jce);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function sum = xy_term_summation(i, x)


TERM_Y_COUNT = 5;


Y_TERMS = ...
[   0,0,0,0,1;
    -2,0,0,2,2;
    0,0,0,2,2;
    0,0,0,0,2;
    0,1,0,0,0;
    0,0,1,0,0;
    -2,1,0,2,2;
    0,0,0,2,1;
    0,0,1,2,2;
    -2,-1,0,2,2;
    -2,0,1,0,0;
    -2,0,0,2,1;
    0,0,-1,2,2;
    2,0,0,0,0;
    0,0,1,0,1;
    2,0,-1,2,2;
    0,0,-1,0,1;
    0,0,1,2,1;
    -2,0,2,0,0;
    0,0,-2,2,1;
    2,0,0,2,2;
    0,0,2,2,2;
    0,0,2,0,0;
    -2,0,1,2,2;
    0,0,0,2,0;
    -2,0,0,2,0;
    0,0,-1,2,1;
    0,2,0,0,0;
    2,0,-1,0,1;
    -2,2,0,2,2;
    0,1,0,0,1;
    -2,0,1,0,1;
    0,-1,0,0,1;
    0,0,2,-2,0;
    2,0,-1,2,1;
    2,0,1,2,2;
    0,1,0,2,2;
    -2,1,1,0,0;
    0,-1,0,2,2;
    2,0,0,2,1;
    2,0,1,0,0;
    -2,0,2,2,2;
    -2,0,1,2,1;
    2,0,-2,0,1;
    2,0,0,0,1;
    0,-1,1,0,0;
    -2,-1,0,2,1;
    -2,0,0,0,1;
    0,0,2,2,1;
    -2,0,2,0,1;
    -2,1,0,2,1;
    0,0,1,-2,0;
    -1,0,1,0,0;
    -2,1,0,0,0;
    1,0,0,0,0;
    0,0,1,2,0;
    0,0,-2,2,2;
    -1,-1,1,0,0;
    0,1,1,0,0;
    0,-1,1,2,2;
    2,-1,-1,2,2;
    0,0,3,2,2;
    2,-1,0,2,2];

sum=0;

for j = 1:TERM_Y_COUNT
    sum = sum + x(j)*Y_TERMS(i,j);
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [del_psi, del_epsilon] = nutation_longitude_and_obliquity(jce, x)

Y_COUNT = 63;
TERM_PSI_A = 1;
TERM_PSI_B = 2;
TERM_EPS_C = 3;
TERM_EPS_D = 4;


PE_TERMS = ...
[   -171996,-174.2,92025,8.9;
    -13187,-1.6,5736,-3.1;
    -2274,-0.2,977,-0.5;
    2062,0.2,-895,0.5;
    1426,-3.4,54,-0.1;
    712,0.1,-7,0;
    -517,1.2,224,-0.6;
    -386,-0.4,200,0;
    -301,0,129,-0.1;
    217,-0.5,-95,0.3;
    -158,0,0,0;
    129,0.1,-70,0;
    123,0,-53,0;
    63,0,0,0;
    63,0.1,-33,0;
    -59,0,26,0;
    -58,-0.1,32,0;
    -51,0,27,0;
    48,0,0,0;
    46,0,-24,0;
    -38,0,16,0;
    -31,0,13,0;
    29,0,0,0;
    29,0,-12,0;
    26,0,0,0;
    -22,0,0,0;
    21,0,-10,0;
    17,-0.1,0,0;
    16,0,-8,0;
    -16,0.1,7,0;
    -15,0,9,0;
    -13,0,7,0;
    -12,0,6,0;
    11,0,0,0;
    -10,0,5,0;
    -8,0,3,0;
    7,0,-3,0;
    -7,0,0,0;
    -7,0,3,0;
    -7,0,3,0;
    6,0,0,0;
    6,0,-3,0;
    6,0,-3,0;
    -6,0,3,0;
    -6,0,3,0;
    5,0,0,0;
    -5,0,3,0;
    -5,0,3,0;
    -5,0,3,0;
    4,0,0,0;
    4,0,0,0;
    4,0,0,0;
    -4,0,0,0;
    -4,0,0,0;
    -4,0,0,0;
    3,0,0,0;
    -3,0,0,0;
    -3,0,0,0;
    -3,0,0,0;
    -3,0,0,0;
    -3,0,0,0;
    -3,0,0,0;
    -3,0,0,0];

sum_psi = 0;
sum_epsilon = 0;

for i = 1:Y_COUNT
    xy_term_sum = deg2rad(xy_term_summation(i, x));
    sum_psi     = sum_psi + ( (PE_TERMS(i,TERM_PSI_A) + ...
                           jce*PE_TERMS(i,TERM_PSI_B))*sin(xy_term_sum) );
    sum_epsilon = sum_epsilon + ( (PE_TERMS(i,TERM_EPS_C) + ...
                           jce*PE_TERMS(i,TERM_EPS_D))*cos(xy_term_sum) );
end

del_psi     = sum_psi    /36000000;
del_epsilon = sum_epsilon/36000000;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = ecliptic_mean_obliquity(jme)

u = jme/10;

out = 84381.448+u*(-4680.93+u*(-1.55+u*(1999.25+u*(-51.38 + ...
      u*(-249.67+u*(-39.05+u*(7.12+u*(27.87+u*(5.79+u*2.45)))))))));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = ecliptic_true_obliquity(delta_epsilon, epsilon0)

out = delta_epsilon + epsilon0/3600;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = aberration_correction(r)

out = -20.4898/(3600*r);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = apparent_sun_longitude(theta, delta_psi, delta_tau)

out = theta + delta_psi + delta_tau;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = greenwich_mean_sidereal_time (jd, jc)

out = limit_degrees(280.46061837+360.98564736629*(jd-2451545)+ ...
      jc*jc*(0.000387933 - jc/38710000));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = greenwich_sidereal_time (nu0, delta_psi, epsilon)

out = nu0 + delta_psi*cos(deg2rad(epsilon));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = geocentric_right_ascension(lamda, epsilon, beta)

lamda_rad   = deg2rad(lamda);
epsilon_rad = deg2rad(epsilon);

out = limit_degrees(rad2deg(atan2(sin(lamda_rad)*cos(epsilon_rad) - ...
      tan(deg2rad(beta))*sin(epsilon_rad), cos(lamda_rad))));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = geocentric_declination(beta, epsilon, lamda)

beta_rad    = deg2rad(beta);
epsilon_rad = deg2rad(epsilon);

out = rad2deg(asin(sin(beta_rad)*cos(epsilon_rad) + ...
      cos(beta_rad)*sin(epsilon_rad)*sin(deg2rad(lamda))));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = observer_hour_angle(nu, longitude, alpha_deg)

out = limit_degrees(nu + longitude - alpha_deg);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = sun_equatorial_horizontal_parallax(r)

out = 8.794/(3600*r);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [delta_alpha, delta_prime] = ...
right_ascension_parallax_and_topocentric_dec(latitude,elevation,xi,h,delta)

lat_rad   = deg2rad(latitude);
xi_rad    = deg2rad(xi);
h_rad     = deg2rad(h);
delta_rad = deg2rad(delta);
u = atan(0.99664719 * tan(lat_rad));
y = 0.99664719 * sin(u) + elevation*sin(lat_rad)/6378140;
x =              cos(u) + elevation*cos(lat_rad)/6378140;

delta_alpha_rad = atan2(-x*sin(xi_rad)*sin(h_rad), ...
                        cos(delta_rad)-x*sin(xi_rad)*cos(h_rad));

delta_prime = rad2deg(atan2((sin(delta_rad)-y*sin(xi_rad))* ...
            cos(delta_alpha_rad),cos(delta_rad)-x*sin(xi_rad)*cos(h_rad)));

delta_alpha = rad2deg(delta_alpha_rad);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = topocentric_right_ascension(alpha_deg, delta_alpha)

out = alpha_deg + delta_alpha;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = topocentric_local_hour_angle(h, delta_alpha)

out = h - delta_alpha;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = topocentric_elevation_angle(latitude, delta_prime, h_prime)

lat_rad         = deg2rad(latitude);
delta_prime_rad = deg2rad(delta_prime);

out = rad2deg(asin(sin(lat_rad)*sin(delta_prime_rad) + ...
              cos(lat_rad)*cos(delta_prime_rad) * cos(deg2rad(h_prime))));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function del_e = atmospheric_refraction_correction(pressure,temperature,...
	                                                     atmos_refract, e0)

SUN_RADIUS = 0.26667;


del_e = 0;

if(e0 >= -1*(SUN_RADIUS + atmos_refract))
    del_e = (pressure/1010)*(283/(273+temperature))* ...
             1.02/(60*tan(deg2rad(e0+10.3/(e0+5.11))));
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = topocentric_elevation_angle_corrected(e0, delta_e)

out = e0 + delta_e;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = topocentric_zenith_angle(e)

out = 90.0 - e;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = topocentric_azimuth_angle_astro(h_prime, latitude, delta_prime)

h_prime_rad = deg2rad(h_prime);
lat_rad     = deg2rad(latitude);

out = limit_degrees(rad2deg(atan2(sin(h_prime_rad), ...
 cos(h_prime_rad)*sin(lat_rad) - tan(deg2rad(delta_prime))*cos(lat_rad))));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = topocentric_azimuth_angle(azimuth_astro)

out = limit_degrees(azimuth_astro + 180);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = surface_incidence_angle(zenith,azimuth_astro,azm_rotation,slope)

zenith_rad = deg2rad(zenith);
slope_rad  = deg2rad(slope);

out = rad2deg(acos(cos(zenith_rad)*cos(slope_rad) + ...
 sin(slope_rad)*sin(zenith_rad)*cos(deg2rad(azimuth_astro-azm_rotation))));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = sun_mean_longitude(jme)

out = limit_degrees(280.4664567+jme*(360007.6982779+jme*(0.03032028+ ...
                    jme*(1/49931+jme*(-1/15300+jme*(-1/2000000))))));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = eot(m, alpha, del_psi, epsilon)

out = limit_minutes(4*(m-0.0057183-alpha+del_psi*cos(deg2rad(epsilon))));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = approx_sun_transit_time(alpha_zero, longitude, nu)

out = (alpha_zero-longitude-nu)/360;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function h0 = sun_hour_angle_at_rise_set(latitude, delta_zero, h0_prime)

h0             = -99999;
latitude_rad   = deg2rad(latitude);
delta_zero_rad = deg2rad(delta_zero);
argument       = (sin(deg2rad(h0_prime))-sin(latitude_rad)* ...
              sin(delta_zero_rad))/(cos(latitude_rad)*cos(delta_zero_rad));
if (abs(argument) <= 1)
    h0 = limit_degrees180(rad2deg(acos(argument)));
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function m_rts = approx_sun_rise_and_set(m_rts, h0)

SUN_TRANSIT = 1;
SUN_RISE = 2;
SUN_SET = 3;

h0_dfrac = h0/360;

m_rts(SUN_RISE)    = limit_zero2one(m_rts(SUN_TRANSIT) - h0_dfrac);
m_rts(SUN_SET)     = limit_zero2one(m_rts(SUN_TRANSIT) + h0_dfrac);
m_rts(SUN_TRANSIT) = limit_zero2one(m_rts(SUN_TRANSIT));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = rts_alpha_delta_prime(ad, n)

JD_MINUS = 1;
JD_ZERO = 2;
JD_PLUS = 3;


a = ad(JD_ZERO) - ad(JD_MINUS);
b = ad(JD_PLUS) - ad(JD_ZERO);

if (abs(a) >= 2)
    a = limit_zero2one(a);
end
if (abs(b) >= 2)
    b = limit_zero2one(b);
end

out = ad(JD_ZERO) + n * (a + b + (b-a)*n)/2;

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = rts_sun_altitude(latitude, delta_prime, h_prime)

latitude_rad    = deg2rad(latitude);
delta_prime_rad = deg2rad(delta_prime);

out = rad2deg(asin(sin(latitude_rad)*sin(delta_prime_rad) + ...
            cos(latitude_rad)*cos(delta_prime_rad)*cos(deg2rad(h_prime))));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function out = sun_rise_and_set(m_rts, h_rts, delta_prime, latitude, ...
                                h_prime, h0_prime, sun)


out = m_rts(sun)+(h_rts(sun)-h0_prime)/(360*cos(deg2rad(delta_prime(sun)))...
                *cos(deg2rad(latitude))*sin(deg2rad(h_prime(sun))));

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Calculate required SPA parameters to get the right ascension (alpha) and
% declination (delta) Note: JD must be already calculated and in structure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function spa = calculate_geocentric_sun_right_ascension_and_declination(spa)

TERM_X0 = 1;
TERM_X1 = 2;
TERM_X2 = 3;
TERM_X3 = 4;
TERM_X4 = 5;
TERM_X_COUNT = 5;

x = zeros(TERM_X_COUNT,1);

spa.jc = julian_century(spa.jd);

spa.jde = julian_ephemeris_day(spa.jd, spa.delta_t);
spa.jce = julian_ephemeris_century(spa.jde);
spa.jme = julian_ephemeris_millennium(spa.jce);

spa.l = earth_heliocentric_longitude(spa.jme);
spa.b = earth_heliocentric_latitude(spa.jme);
spa.r = earth_radius_vector(spa.jme);

spa.theta = geocentric_longitude(spa.l);
spa.beta  = geocentric_latitude(spa.b);

spa.x0 = mean_elongation_moon_sun(spa.jce);
x(TERM_X0) = spa.x0;
spa.x1 = mean_anomaly_sun(spa.jce);
x(TERM_X1) = spa.x1;
spa.x2 = mean_anomaly_moon(spa.jce);
x(TERM_X2) = spa.x2;
spa.x3 = argument_latitude_moon(spa.jce);
x(TERM_X3) = spa.x3;
spa.x4 = ascending_longitude_moon(spa.jce);
x(TERM_X4) = spa.x4;

[spa.del_psi,spa.del_epsilon] = nutation_longitude_and_obliquity(spa.jce,x);

spa.epsilon0 = ecliptic_mean_obliquity(spa.jme);
spa.epsilon  = ecliptic_true_obliquity(spa.del_epsilon, spa.epsilon0);

spa.del_tau = aberration_correction(spa.r);
spa.lamda   = apparent_sun_longitude(spa.theta, spa.del_psi,spa.del_tau);
spa.nu0     = greenwich_mean_sidereal_time (spa.jd, spa.jc);
spa.nu      = greenwich_sidereal_time (spa.nu0, spa.del_psi,spa.epsilon);

spa.alpha = geocentric_right_ascension(spa.lamda, spa.epsilon,spa.beta);
spa.delta = geocentric_declination(spa.beta, spa.epsilon, spa.lamda);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Calculate Equation of Time (EOT) and Sun Rise, Transit, & Set (RTS)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function spa = calculate_eot_and_sun_rise_transit_set(spa)


SUN_RADIUS = 0.26667;
JD_ZERO = 2;
JD_COUNT = 4;
SUN_TRANSIT = 1;
SUN_RISE = 2;
SUN_SET = 3;
SUN_COUNT = 4;



alpha = zeros(JD_COUNT,1);
delta = zeros(JD_COUNT,1);
m_rts = zeros(SUN_COUNT,1);
nu_rts = zeros(SUN_COUNT,1);
h_rts = zeros(SUN_COUNT,1);
alpha_prime = zeros(SUN_COUNT,1);
delta_prime = zeros(SUN_COUNT,1);
h_prime = zeros(SUN_COUNT,1);
h0_prime = -1*(SUN_RADIUS + spa.atmos_refract);

sun_rts = spa;
m       = sun_mean_longitude(spa.jme);
spa.eot = eot(m, spa.alpha, spa.del_psi, spa.epsilon);
sun_rts.hour = 0;
sun_rts.minute = 0;
sun_rts.second = 0;
sun_rts.delta_ut1 = 0;
sun_rts.timezone = 0;

sun_rts.jd = julian_day(sun_rts.year,sun_rts.month,sun_rts.day,sun_rts.hour, ...
         sun_rts.minute,sun_rts.second,sun_rts.delta_ut1,sun_rts.timezone);

sun_rts = calculate_geocentric_sun_right_ascension_and_declination(sun_rts);
nu = sun_rts.nu;

sun_rts.delta_t = 0;
sun_rts.jd = sun_rts.jd-1;
for i = 1:JD_COUNT
    sun_rts = calculate_geocentric_sun_right_ascension_and_declination(sun_rts);
    alpha(i) = sun_rts.alpha;
    delta(i) = sun_rts.delta;
    sun_rts.jd = sun_rts.jd+1;
end

m_rts(SUN_TRANSIT) = approx_sun_transit_time(alpha(JD_ZERO),spa.longitude,nu);
h0 = sun_hour_angle_at_rise_set(spa.latitude,delta(JD_ZERO),h0_prime);

if (h0 >= 0)
    m_rts = approx_sun_rise_and_set(m_rts, h0);
    for i = 1:SUN_COUNT
        nu_rts(i)      = nu + 360.985647*m_rts(i);
        n              = m_rts(i) + spa.delta_t/86400;
        alpha_prime(i) = rts_alpha_delta_prime(alpha,n);
        delta_prime(i) = rts_alpha_delta_prime(delta,n);
        h_prime(i)     = limit_degrees180pm(nu_rts(i)+spa.longitude-alpha_prime(i));
        h_rts(i)       = rts_sun_altitude(spa.latitude,delta_prime(i),h_prime(i));
    end
    
    spa.srha = h_prime(SUN_RISE);
    spa.ssha = h_prime(SUN_SET);
    spa.sta  = h_rts(SUN_TRANSIT);
    
    spa.suntransit = dayfrac_to_local_hr(m_rts(SUN_TRANSIT)- ...
                                    h_prime(SUN_TRANSIT)/360,spa.timezone);
    
    spa.sunrise = dayfrac_to_local_hr(sun_rise_and_set(m_rts,h_rts, ...
         delta_prime,spa.latitude,h_prime,h0_prime,SUN_RISE),spa.timezone);
    
    spa.sunset = dayfrac_to_local_hr(sun_rise_and_set(m_rts,h_rts, ...
          delta_prime,spa.latitude,h_prime,h0_prime,SUN_SET),spa.timezone);
    
else
    spa.srha = -99999;
    spa.ssha = -99999;
    spa.sta = -99999;
    spa.suntransit = -99999;
    spa.sunrise = -99999;
    spa.sunset = -99999;
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Calculate all SPA parameters and put into structure
% Note: All inputs values (listed in header file) must already be in structure
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [result, spa] = spa_calculate(spa)

SPA_ZA_INC = 1; %calculate zenith, azimuth, and incidence
SPA_ZA_RTS = 2; %calculate zenith, azimuth, and sun rise/transit/set values
SPA_ALL = 3;    %calculate all SPA output values

result = validate_inputs(spa);

if (result == 0)
    spa.jd = julian_day(spa.year,spa.month,spa.day,spa.hour,spa.minute, ...
                                  spa.second, spa.delta_ut1, spa.timezone);
    
    spa = calculate_geocentric_sun_right_ascension_and_declination(spa);
    
    spa.h  = observer_hour_angle(spa.nu, spa.longitude, spa.alpha);
    spa.xi = sun_equatorial_horizontal_parallax(spa.r);

    [spa.del_alpha, spa.delta_prime] = ...
    right_ascension_parallax_and_topocentric_dec(spa.latitude, ...
                                     spa.elevation,spa.xi,spa.h,spa.delta);

    spa.alpha_prime = topocentric_right_ascension(spa.alpha, spa.del_alpha);
    spa.h_prime     = topocentric_local_hour_angle(spa.h, spa.del_alpha);

    spa.e0    = topocentric_elevation_angle(spa.latitude, spa.delta_prime, spa.h_prime);
    spa.del_e = atmospheric_refraction_correction(spa.pressure, ...
                                spa.temperature,spa.atmos_refract, spa.e0);
    spa.e     = topocentric_elevation_angle_corrected(spa.e0, spa.del_e);

    spa.zenith        = topocentric_zenith_angle(spa.e);
    spa.azimuth_astro = topocentric_azimuth_angle_astro(spa.h_prime, ...
                                             spa.latitude,spa.delta_prime);
    spa.azimuth       = topocentric_azimuth_angle(spa.azimuth_astro);

    if ((spa.function == SPA_ZA_INC) || (spa.function == SPA_ALL))
        spa.incidence  = surface_incidence_angle(spa.zenith, ...
                             spa.azimuth_astro,spa.azm_rotation,spa.slope);
    end
    if ((spa.function == SPA_ZA_RTS) || (spa.function == SPA_ALL))
        spa = calculate_eot_and_sun_rise_transit_set(spa);
    end
end

end